@page "/projects"
@using EngineeringCalc.Models
@using EngineeringCalc.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Projects</PageTitle>

<h1>Projects</h1>

<button class="btn btn-primary mb-3" @onclick="ShowCreateDialog">
    <i class="bi bi-plus-circle"></i> New Project
</button>

@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Project Name</th>
                <th>Description</th>
                <th>Status</th>
                <th>Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects)
            {
                <tr>
                    <td>@project.ProjectName</td>
                    <td>@project.Description</td>
                    <td>
                        <span class="badge bg-@(project.Status == "Active" ? "success" : "secondary")">
                            @project.Status
                        </span>
                    </td>
                    <td>@project.CreatedDate.ToString("yyyy-MM-dd")</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => ViewJobs(project.ProjectId)">
                            <i class="bi bi-folder"></i> Jobs
                        </button>
                        <button class="btn btn-sm btn-warning" @onclick="() => ShowEditDialog(project)">
                            <i class="bi bi-pencil"></i> Edit
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteProject(project.ProjectId)">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showDialog)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingProject?.ProjectId > 0 ? "Edit Project" : "New Project")</h5>
                    <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Project Name *</label>
                        <input type="text" class="form-control" @bind="editingProject.ProjectName" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" rows="3" @bind="editingProject.Description"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <select class="form-select" @bind="editingProject.Status">
                            <option value="Active">Active</option>
                            <option value="Completed">Completed</option>
                            <option value="On Hold">On Hold</option>
                            <option value="Archived">Archived</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Created By</label>
                        <input type="text" class="form-control" @bind="editingProject.CreatedBy" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveProject">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Project>? projects;
    private bool showDialog = false;
    private Project editingProject = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        projects = await DbContext.Projects
            .OrderByDescending(p => p.CreatedDate)
            .ToListAsync();
    }

    private void ShowCreateDialog()
    {
        editingProject = new Project
        {
            Status = "Active"
        };
        showDialog = true;
    }

    private void ShowEditDialog(Project project)
    {
        editingProject = new Project
        {
            ProjectId = project.ProjectId,
            ProjectName = project.ProjectName,
            Description = project.Description,
            Status = project.Status,
            CreatedBy = project.CreatedBy,
            CreatedDate = project.CreatedDate
        };
        showDialog = true;
    }

    private void CloseDialog()
    {
        showDialog = false;
        editingProject = new();
    }

    private async Task SaveProject()
    {
        if (string.IsNullOrWhiteSpace(editingProject.ProjectName))
        {
            return;
        }

        if (editingProject.ProjectId > 0)
        {
            var existing = await DbContext.Projects.FindAsync(editingProject.ProjectId);
            if (existing != null)
            {
                existing.ProjectName = editingProject.ProjectName;
                existing.Description = editingProject.Description;
                existing.Status = editingProject.Status;
                existing.CreatedBy = editingProject.CreatedBy;
                existing.LastModifiedDate = DateTime.UtcNow;
            }
        }
        else
        {
            DbContext.Projects.Add(editingProject);
        }

        await DbContext.SaveChangesAsync();
        await LoadProjects();
        CloseDialog();
    }

    private async Task DeleteProject(int projectId)
    {
        var project = await DbContext.Projects.FindAsync(projectId);
        if (project != null)
        {
            DbContext.Projects.Remove(project);
            await DbContext.SaveChangesAsync();
            await LoadProjects();
        }
    }

    private void ViewJobs(int projectId)
    {
        NavigationManager.NavigateTo($"/projects/{projectId}/jobs");
    }
}
